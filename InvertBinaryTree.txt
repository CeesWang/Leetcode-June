/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) {
        TreeNode invertRootNode = root;
        invertNodes(invertRootNode);
        return invertRootNode;
    }

    public void invertNodes(TreeNode root) {
        if (root != null) {
            if (root.left != null && root.right != null) {  // left and right node exists so swap 
                TreeNode temp = root.right;
                root.right = root.left;
                root.left = temp;
            }
            else if (root.left != null) {       // left root exists but not right, set left to right and left to null
                root.right = root.left;                     
                root.left = null;
            }
            else if (root.right != null) {      // right root exists but not left so set right to left and right to null
                root.left = root.right;
                root.right = null;
            }
            invertNodes(root.left);
            invertNodes(root.right);
        }
    }
}
    
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) {
        invertNodes(root);
        return root;
    }

    public void invertNodes(TreeNode root) {
        if (root != null) {
            TreeNode temp = root.right;
            root.right = root.left;
            root.left = temp;
            invertNodes(root.left);
            invertNodes(root.right);
        }
    }
}	// optimized solution
    



